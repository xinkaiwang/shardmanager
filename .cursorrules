# Shardmanager 特定规则和知识库

这个文件包含 shardmanager 模块特定的规则和经验教训，主要关注核心功能实现和代码质量。

## Rules Priority System
[P0] - 关键安全规则，必须严格遵守，违反可能导致严重后果
[P1] - 重要规则，应该始终遵守，除非有特殊情况
[P2] - 最佳实践，建议遵守但可以根据具体情况调整

## Critical Safety Rules [P0]
- 数据安全规则：
  - 所有数据操作必须有错误处理
  - 必须验证输入数据的有效性
  - 敏感数据必须加密存储
- 服务稳定性规则：
  - 所有服务必须实现健康检查
  - 必须处理所有可能的错误状态
  - 关键操作必须有日志记录
- 版本兼容性规则：
  - API 变更必须保持向后兼容
  - 配置格式变更必须提供迁移方案
  - 版本号必须遵循语义化版本规范

## Project Structure
- cmd/：命令行工具
- services/：微服务实现
  - hellosvc/：示例服务
- libs/：共享库
  - xklib/：通用工具库

## Service Architecture
1. 服务设计原则：
   - 单一职责
   - 松耦合
   - 高内聚
   - 可测试性

2. 通信协议：
   - 服务间通信使用 gRPC
   - 外部 API 使用 REST
   - 事件通知使用 NATS

3. 数据流：
   - 请求验证 -> 业务逻辑 -> 数据持久化
   - 错误处理在每一层都必须存在
   - 日志记录关键操作和错误

## Common Issues
1. 部署相关问题：
   - 服务启动失败：检查配置文件和环境变量
   - 健康检查失败：查看服务日志和依赖状态
   - 性能问题：检查资源使用和连接池配置

2. 代码相关问题：
   - 内存泄漏：检查资源释放和 goroutine 管理
   - 并发问题：检查锁的使用和竞态条件
   - 连接问题：检查超时设置和重试策略

## Best Practices [P2]
1. 代码规范：
   - 遵循 Go 标准代码风格
   - 使用 gofmt 格式化代码
   - 添加适当的注释和文档

2. 测试规范：
   - 单元测试覆盖率要求 > 80%
   - 集成测试必须包含错误场景
   - 性能测试必须有基准数据

3. 日志规范：
   - 使用结构化日志
   - 包含必要的上下文信息
   - 错误日志必须包含堆栈信息

## Version Compatibility
当前版本：v0.1.0
- API 版本：v1
- 配置版本：v1
- 数据格式版本：v1

### 版本依赖：
- Go 版本：1.21+
- NATS 版本：2.10+
- etcd 版本：v3.5.11

## Deployment Requirements
1. 资源需求：
   - CPU: 最小 200m，推荐 500m
   - 内存: 最小 512Mi，推荐 1Gi
   - 存储: 根据数据量定制

2. 环境要求：
   - 必需的环境变量
   - 必需的配置文件
   - 必需的外部服务

3. 监控指标：
   - 服务健康状态
   - 请求延迟
   - 错误率
   - 资源使用率 